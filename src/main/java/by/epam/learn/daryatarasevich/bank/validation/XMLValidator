package by.epam.learn.daryatarasevich.bank.validation;

import by.epam.learn.daryatarasevich.bank.exception.ConstantMessages;
import by.epam.learn.daryatarasevich.bank.exception.IncorrectFilePathException;
import by.epam.learn.daryatarasevich.bank.exception.XMLInvalidException;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.xml.sax.SAXException;
import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;
import java.io.File;
import java.io.IOException;

public class XMLValidator {
    private static final Logger LOGGER = LogManager.getLogger(XMLValidator.class);

    public XMLValidator() {
    }

    /**
     * To validate that xml file is valid according to xsd.
     *
     * @param fileName-xml file to validate
     * @param xsd-xsd scheme for validation
     * @return true(if file is valid)
     * @throws XMLInvalidException
     */
    public boolean validate(String fileName, String xsd) throws IOException, XMLInvalidException, IncorrectFilePathException {
        FileValidator fileValidator=new FileValidator();
        if (!fileValidator.doesFileExist(fileName)) {
            LOGGER.error(ConstantMessages.FILE_NAME_IS_INCORRECT);
            throw new IncorrectFilePathException(ConstantMessages.FILE_NAME_IS_INCORRECT);
        }
        if (xsd != null && !xsd.isEmpty()) {
            SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
            File schemaLocation = new File(xsd);
            try{
                Schema schema = schemaFactory.newSchema(schemaLocation);
            Validator validator = schema.newValidator();
            validator.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
            validator.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
            Source source = new StreamSource(fileName);
            validator.validate(source);
            return true;
            } catch (SAXException e){
                LOGGER.error(ConstantMessages.XML_FILE_IS_NOT_VALID);
                throw new XMLInvalidException(ConstantMessages.XML_FILE_IS_NOT_VALID);
            }
        } else {
            LOGGER.error(ConstantMessages.XML_FILE_IS_NOT_VALID);
            throw new NullPointerException(ConstantMessages.XML_FILE_IS_NOT_VALID);
        }
    }
}
