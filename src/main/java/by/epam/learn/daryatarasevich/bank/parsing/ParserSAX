package by.epam.learn.daryatarasevich.bank.parsing;

import by.epam.learn.daryatarasevich.bank.action.DateConverter;
import by.epam.learn.daryatarasevich.bank.entity.ConstantOfDeposit;
import by.epam.learn.daryatarasevich.bank.entity.Deposit;
import by.epam.learn.daryatarasevich.bank.entity.DepositType;
import by.epam.learn.daryatarasevich.bank.exception.ConstantMessages;
import by.epam.learn.daryatarasevich.bank.exception.IncorrectFilePathException;
import by.epam.learn.daryatarasevich.bank.exception.XMLInvalidException;
import by.epam.learn.daryatarasevich.bank.validation.FileValidator;
import by.epam.learn.daryatarasevich.bank.validation.XMLValidator;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

public class ParserSAX extends DefaultHandler {
    private List<Deposit> deposits = new ArrayList<>();
    private Deposit deposit;
    private int temporary =0;
    private static final Logger LOGGER = LogManager.getLogger(ParserSAX.class);

    public ParserSAX() {
    }

    public List<Deposit> getDeposits() {
        return deposits;
    }
    /**
     * To parse xml file with SAX parser.
     * Firstly to create parser, then to parse xml file to list of deposits.
     *
     * @param fileName-xml file to parse
     * @param xsd-xsd scheme for validation
     * @return deposits
     */
    public List<Deposit> parse(String fileName,String xsd) throws ParserConfigurationException, SAXException, IOException, IncorrectFilePathException, XMLInvalidException {
        FileValidator fileValidator=new FileValidator();
        if (!fileValidator.doesFileExist(fileName)) {
            LOGGER.error(ConstantMessages.FILE_NAME_IS_INCORRECT);
            throw new IncorrectFilePathException(ConstantMessages.FILE_NAME_IS_INCORRECT);
        }
        XMLValidator xmlValidator=new XMLValidator();
        if (!xmlValidator.validate(fileName,xsd)) {
            LOGGER.error(ConstantMessages.XML_FILE_IS_NOT_VALID);
            throw new XMLInvalidException(ConstantMessages.XML_FILE_IS_NOT_VALID);
        }
        SAXParserFactory factory = SAXParserFactory.newInstance();
        SAXParser parser = factory.newSAXParser();
        parser.parse(new File(fileName), this);
        List<Deposit> deposits = this.getDeposits();
        return deposits;
    }
    /**
     * To handle start of element of xml file.
     *
     * @param uri
     * @param localName
     * @param qName
     * @param attributes
     */
    @Override
    public void startElement(String uri, String localName, String qName, Attributes attributes) {
        switch (qName) {
            case ConstantOfDeposit.BANKS:
                temporary = 1;
                break;
            case ConstantOfDeposit.DEPOSIT:
                deposit = new Deposit();
                deposit.setId(attributes.getValue(0));
                temporary = 2;
                break;
            case ConstantOfDeposit.BANKNAME:
                temporary = 3;
                break;
            case ConstantOfDeposit.COUNTRY:
                temporary = 4;
                break;
            case ConstantOfDeposit.TYPE:
                temporary = 5;
                break;
            case ConstantOfDeposit.DEPOSITOR:
                temporary = 6;
                break;
            case ConstantOfDeposit.ACCOUNTID:
                temporary = 7;
                break;
            case ConstantOfDeposit.AMOUNTONDEPOSIT:
                temporary = 8;
                break;
            case ConstantOfDeposit.PROFITABILITY:
                temporary = 9;
                break;
            case ConstantOfDeposit.TIMECONSTRAINTS:
                temporary = 10;
                break;
            default:
                temporary=0;
                break;
        }
    }
    /**
     * To handle end of element of xml file.
     *
     * @param uri
     * @param localName
     * @param qName
     */
    @Override
    public void endElement(String uri,String localName,String qName){
        switch(qName){
            case ConstantOfDeposit.DEPOSIT:{
                deposits.add(deposit);
            }
        }
        temporary =0;
    }
    /**
     * To handle characters.
     *
     * @param buf
     * @param start
     * @param length
     */
    @Override
    public void characters(char[] buf,int start, int length) throws IllegalStateException{
        String text=new String(buf,start,length);
        text = text.replace("\n", "").trim();
        text=text.replace("\r","").trim();
        switch(temporary){
            case 0:break;
            case 1:break;
            case 2:break;
            case 3:
                deposit.setBankName(text);
                temporary =0;
                break;
            case 4:
                deposit.setCountry(text);
                temporary =0;
                break;
            case 5:
                deposit.setType(DepositType.valueOf(text.toUpperCase()));
                temporary =0;
                break;
            case 6:
                deposit.setDepositor(text);
                temporary =0;
                break;
            case 7:
                deposit.setAccountID(Integer.parseInt(text));
                temporary =0;
                break;
            case 8:
                deposit.setAmountOnDeposit(Integer.parseInt(text));
                temporary =0;
                break;
            case 9:
                deposit.setProfitability(Integer.parseInt(text));
                temporary =0;
                break;
            case 10:
                DateConverter dateConverter =new DateConverter();
                try {
                    deposit.setTimeconstraints(dateConverter.convertStringToDate(text));
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                temporary =0;
                break;
            default:
                LOGGER.error(ConstantMessages.UNEXPECTED_VALUE);
                throw new IllegalStateException(ConstantMessages.UNEXPECTED_VALUE+ temporary);
        }
    }
    /**
     * To handle white spaces.
     *
     * @param ch
     * @param start
     * @param length
     */
    @Override
    public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {
        super.ignorableWhitespace(ch, start, length);
    }
    /**
     * To print list of deposits.
     *
     * @param deposits-list of deposits to print
     */
    public void print(List<Deposit> deposits){
        for (Deposit d : deposits){
            System.out.println(d.toString());
        }
    }
}

